plugins {
    id 'java-library'
    id 'jacoco'
    id 'com.gradleup.shadow' version '8.3.3'
    id 'com.diffplug.spotless' version '6.25.0'
}

group 'net.smoofyuniverse'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
}

configurations {
    shaded { transitive = false }
    implementation.extendsFrom shaded

    spongevanilla { transitive = false }
    spongeforge { transitive = false }
    spongeneo { transitive = false }
    testRuntimeOnly.extendsFrom spongevanilla
}

dependencies {
    api 'org.spongepowered:spongeapi:14.0.0'

    shaded('net.smoofyuniverse:oreapi:1.1.0')
    shaded('net.smoofyuniverse:oreupdater:1.6.0')
    shaded('net.smoofyuniverse:worldmap:1.3.0')

    spongevanilla('org.spongepowered:spongevanilla:1.21.4-14.0.0-RC0:universal')
    spongeforge('org.spongepowered:spongeforge:1.21.4-54.1.3-14.0.0-RC2255:universal')
    spongeneo('org.spongepowered:spongeneo:1.21.4-21.4.137-14.0.0-RC2255:universal')

    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testRuntimeOnly group: 'org.jacoco', name: 'org.jacoco.core', version: jacoco.toolVersion
}

jar {
    archiveClassifier = 'base'
}

shadowJar {
    archiveClassifier = ''

    dependencies {
        include dependency('net.smoofyuniverse:oreapi')
        include dependency('net.smoofyuniverse:oreupdater')
        include dependency('net.smoofyuniverse:worldmap')
    }

    relocate 'net.smoofyuniverse.ore', 'net.smoofyuniverse.autopickup.ore'
    relocate 'net.smoofyuniverse.map', 'net.smoofyuniverse.autopickup.map'
}

test {
    useJUnitPlatform()

    workingDir = layout.buildDirectory.dir("test-run").get().asFile
    environment("SPONGE_PLUGINS", files([sourceSets.main, sourceSets.test].collect { it.output }, configurations.shaded).join("&"))
    jvmArgs("-Dsponge.jacoco.packages=net.smoofyuniverse.autopickup")
    jvmArgs("-Djunit.platform.launcher.interceptors.enabled=true")

    jacoco {
        excludeClassLoaders = ["cpw.mods.modlauncher.TransformingClassLoader"]
    }

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "utf-8"
}

tasks.register('setupVanillaServer', Copy) {
    into 'run/vanilla'

    from configurations.spongevanilla
    rename('spongevanilla-(.*).jar', 'spongevanilla.jar')

    into('mods') {
        from shadowJar
    }
}

tasks.register('setupForgeServer', Copy) {
    into 'run/forge/mods'

    from configurations.spongeforge
    rename('spongeforge-(.*).jar', 'spongeforge.jar')

    from shadowJar
}

tasks.register('setupNeoServer', Copy) {
    into 'run/neoforge/mods'

    from configurations.spongeneo
    rename('spongeneo-(.*).jar', 'spongeneo.jar')

    from shadowJar
}

spotless {
    ratchetFrom 'origin/master'

    java {
        licenseHeaderFile(rootProject.file('HEADER'))
    }
}
